#!/usr/bin/env python3

import asyncio

clients = []

self_client_ident = "You!anon@localhost"
anon_client_ident = "Anonymous!anon@localhost"

# Rewrite "you"s in messages to minimise needless highlights.
import re

cyrillic_small_o = "о"
cyrillic_capital_o = "О"

exchange_regex = re.compile("you", re.I)


def exchange(string):
    for match in exchange_regex.finditer(string):
        location = match.start() + 1

        if string[location] == "o":
            char = cyrillic_small_o
        else:
            char = cyrillic_capital_o

        string = string[:location] + char + string[location + 1 :]
    return string


class Client:
    def __init__(self, writer):
        self.writer = writer
        self.channels = set()

    def write(self, string, log=True):
        if log:
            print(f"-> {string}")
        self.writer.write(f"{string}\r\n".encode())

    def send_ping(self):
        self.write(f"PING :001", log=False)

    def send_pong(self, token):
        self.write(f"PONG {token}", log=False)

    def send_whois(self):
        self.write(
            f":thewired 311 navi Anonymous Anonymous anon@localhost * :Anonymous"
        )

    def send_welcome(self):
        self.write(f":thewired 001 You :Welcome to The Wired")
        self.write(f":thewired 376 :Stay comfy")

    def send_notice(self, channel, msg):
        self.write(f":admin NOTICE {channel} :{msg}")

    def send_privmsg(self, channel, msg):
        self.write(f":{anon_client_ident} PRIVMSG {channel} :{msg}")

    def send_join(self, channel):
        self.channels.add(channel)
        self.write(f":{anon_client_ident} TOPIC {channel} :{channel}")
        self.write(f":{self_client_ident} JOIN :{channel}")
        self.write(f":thewired 353 You = {channel} :You Anonymous")

    def send_part(self, channel):
        self.write(f":{self_client_ident} PART :{channel}")


async def handle(reader, writer):
    client = Client(writer)
    clients.append(client)
    addr = writer.get_extra_info("peername")
    print(f"{addr!r} connected")
    try:
        client.send_ping()
        while True:
            data = await reader.readuntil(b"\r\n")
            message = data.decode().strip()
            print(message)
            message_parts = message.split(" ")
            if message.startswith("PING"):
                if len(message_parts) > 1:
                    token = message_parts[1]
                    client.send_pong(token)
            elif message.startswith("USER"):
                client.send_welcome()
                client.send_join("#random")
            elif message.startswith("WHOIS"):
                client.send_whois()
            elif message.startswith("JOIN"):
                if len(message_parts) > 1:
                    channel = message_parts[1]
                    client.send_join(channel)
                    clients_num = len([c for c in clients if channel in c.channels])
                    client.send_notice(
                        channel,
                        f"welcome to {channel}, there might be about {clients_num} people connected right now",
                    )
            elif message.startswith("PART"):
                if len(message_parts) > 1:
                    channel = message_parts[1]
                    client.channels.remove(channel)
                    client.send_part(channel)
            elif message.startswith("PRIVMSG"):
                if len(message_parts) > 2:
                    channel = message_parts[1]
                    message = message.split(":", 1)[1]
                    message = exchange(message)
                    for c in clients:
                        if channel in c.channels and c != client:
                            c.send_privmsg(channel, message)
            await writer.drain()
    finally:
        clients.remove(client)
        writer.close()


async def irc_main():
    server = await asyncio.start_server(handle, "0.0.0.0", 6667)
    addr = server.sockets[0].getsockname()
    print(f"serving on {addr}")
    async with server:
        await server.serve_forever()


loop = asyncio.get_event_loop()
loop.create_task(irc_main())
loop.run_forever()
