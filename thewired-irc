#!/usr/bin/env python3

import argparse
import asyncio
import importlib
import signal
import ssl

from prometheus_client import start_http_server

import reloadable

clients = []


class Client:
    def __init__(self, writer):
        self.writer = writer
        self.channels = set()


def reload():
    print("reloading reloadable.py")
    importlib.reload(reloadable)
    reloadable.reload(clients)


async def handle(reader, writer):
    client = Client(writer)
    clients.append(client)
    reloadable.on_client_connect(client)
    try:
        reloadable.Client(client).send_ping()
        while True:
            data = await reader.readuntil(b"\r\n")
            reloadable.process_message(data, client, clients)
            await writer.drain()
    finally:
        reloadable.on_client_disconnect(client)
        clients.remove(client)
        writer.close()


async def irc_main():
    server = await asyncio.start_server(handle, "0.0.0.0", 6667)
    addr = server.sockets[0].getsockname()
    print(f"serving on {addr}")
    await server.serve_forever()


async def ssl_irc_main(fullchain, privkey):
    ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)
    ssl_context.load_cert_chain(certfile=fullchain, keyfile=privkey)

    server = await asyncio.start_server(handle, "0.0.0.0", 6697, ssl=ssl_context)
    addr = server.sockets[0].getsockname()
    print(f"serving ssl on {addr}")
    await server.serve_forever()


parser = argparse.ArgumentParser()
parser.add_argument("--fullchain", default=None)
parser.add_argument("--privkey", default=None)

args = parser.parse_args()

loop = asyncio.get_event_loop()
loop.create_task(irc_main())

if args.fullchain and args.privkey:
    loop.create_task(ssl_irc_main(args.fullchain, args.privkey))

loop.add_signal_handler(signal.SIGHUP, reload)

start_http_server(8000)

loop.run_forever()
